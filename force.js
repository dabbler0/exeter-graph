// Generated by CoffeeScript 1.8.0
(function() {
  var HEIGHT, SELECTED, WIDTH, genColor;

  WIDTH = 500;

  HEIGHT = 500;

  SELECTED = null;

  genColor = function(str) {
    Math.seedrandom(str);
    return d3.hsl(Math.random() * 360, 1, 0.5);
  };

  d3.json('data.json', function(error, graph) {
    var el, force, gnodes, i, j, labels, link, node, svg, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
    force = d3.layout.force().charge(-120).linkDistance(50).size([WIDTH, HEIGHT]);
    svg = d3.select('#graph').append('svg').attr('width', WIDTH).attr('height', HEIGHT);
    _ref = graph.nodes;
    for (j = _i = 0, _len = _ref.length; _i < _len; j = ++_i) {
      node = _ref[j];
      node.index = j;
    }
    _ref1 = graph.links;
    for (i = _j = 0, _len1 = _ref1.length; _j < _len1; i = ++_j) {
      el = _ref1[i];
      _ref2 = graph.nodes;
      for (j = _k = 0, _len2 = _ref2.length; _k < _len2; j = ++_k) {
        node = _ref2[j];
        if (node.name === el.source) {
          graph.links[i].source = j;
        }
        if (node.name === el.target) {
          graph.links[i].target = j;
        }
      }
    }
    force.nodes(graph.nodes).links(graph.links);
    link = gnodes = null;
    force.on('tick', function() {
      link.attr('x1', function(d) {
        return d.source.x;
      }).attr('y1', function(d) {
        return d.source.y;
      }).attr('x2', function(d) {
        return d.target.x;
      }).attr('y2', function(d) {
        return d.target.y;
      });
      return gnodes.attr('transform', function(d) {
        return "translate(" + d.x + "," + d.y + ")";
      });
    });
    force.start();
    link = svg.selectAll('.link').data(force.links()).enter().append('line').attr('class', 'link').style('stroke-width', function(d) {
      return Math.sqrt(d.value);
    });
    gnodes = svg.selectAll('g.gnode').data(force.nodes()).enter().append('g').classed('gnode', true);
    node = gnodes.append('circle').attr('class', 'node').attr('r', 5).style('fill', function(d) {
      console.log(genColor(d.name));
      return genColor(d.name);
    }).call(force.drag);
    labels = gnodes.append('text').text(function(d) {
      return d.name;
    }).style('transform', 'translate(5px, 5px)');
    return gnodes.on('click', function(d) {
      if (SELECTED != null) {
        force.links().push({
          source: SELECTED.index,
          target: d.index,
          value: 1
        });
        console.log('connected', SELECTED, d);
        SELECTED = null;
        link = svg.selectAll('.link').data(force.links());
        link.enter().append('line').attr('class', 'link').style('stroke-width', function(d) {
          return Math.sqrt(d.value);
        });
        link.exit().remove();
        document.getElementById('out').value = JSON.stringify(graph);
        return force.start();
      } else {
        console.log('selected', d);
        return SELECTED = d;
      }
    });
  });

}).call(this);
